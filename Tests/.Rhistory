hypothesis(pss.2,'sps_identity>0')
# check NA
if (is.na(countryRegions[i,'GEO3'])){
next
}
# start with Australia
if (countryRegions[i,'GEO3'] =='Australia and New Zealand'){
data_to_map[i,1]<-      .19
}
if (countryRegions[i,'GEO3'] == 'Central Asia'){
data_to_map[i,1]<-
.17
}
if (countryRegions[i,'GEO3'] == 'NW Pacific and East Asia'){
data_to_map[i,1]<-
.23
}
if (countryRegions[i,'GEO3'] == 'Eastern Europe' | countryRegions[i,'GEO3'] == 'Central Europe'){
data_to_map[i,1]<-
.11
}
if (countryRegions[i,'GEO3'] == 'Caribbean' | countryRegions[i,'GEO3'] == 'Meso-America'|
countryRegions[i,'GEO3'] == 'South America'){
data_to_map[i,1]<-
.14
}
if (countryRegions[i,'GEO3'] == 'North Africa'){
data_to_map[i,1]<-
-.49
}
if (countryRegions[i,'GEO3'] == 'Canada'|
countryRegions[i,'GEO3'] == 'US'){
data_to_map[i,1]<-
.29
}
if (countryRegions[i,'GEO3'] == 'Southeast Asia'){
data_to_map[i,1]<-
.29
}
if (countryRegions[i,'GEO3'] == 'South Asia'){
data_to_map[i,1]<-
.13
}
if (countryRegions[i,'GEO3'] == 'Southern Africa'|
countryRegions[i,'GEO3'] == 'Eastern Africa'|
countryRegions[i,'GEO3'] == 'Central Africa'|
countryRegions[i,'GEO3'] == 'Western Africa'| countryRegions[i,'GEO3'] == 'Western Indian Ocean'|
countryRegions[i,'ADMIN'] == 'South Sudan'){
data_to_map[i,1]<-
.09
}
if (countryRegions[i,'GEO3'] == 'Mashriq'|countryRegions[i,'GEO3'] == 'Arabian Peninsula'){
data_to_map[i,1]<-
-.01
}
if (countryRegions[i,'GEO3'] == 'Western Europe'){
data_to_map[i,1]<-
.06
}
if (countryRegions[i,'ADMIN'] == 'United Kingdom' | countryRegions[i,'ADMIN'] == 'Iceland'|
countryRegions[i,'ADMIN'] == 'Ireland' | countryRegions[i,'ADMIN'] == 'Finland'|
countryRegions[i,'ADMIN'] == 'Norway' | countryRegions[i,'ADMIN'] == 'Sweden'|
countryRegions[i,'ADMIN'] == 'Denmark' | countryRegions[i,'ADMIN'] == 'Estonia'|
countryRegions[i,'ADMIN'] == 'Latvia' | countryRegions[i,'ADMIN'] == 'Lithuania'){
data_to_map[i,1]<-
.23
}
if (countryRegions[i,'ADMIN'] == 'Spain' | countryRegions[i,'ADMIN'] == 'Portugal'|
countryRegions[i,'ADMIN'] == 'Slovenia' | countryRegions[i,'ADMIN'] == 'Croatia'|
countryRegions[i,'ADMIN'] == 'Andora' | countryRegions[i,'ADMIN'] == 'San Marino'|
countryRegions[i,'ADMIN'] == 'Vatican' | countryRegions[i,'ADMIN'] == 'Italy'|
countryRegions[i,'ADMIN'] == 'Malta' | countryRegions[i,'ADMIN'] == 'Republic of Serbia'|
countryRegions[i,'ADMIN'] == 'Greece' | countryRegions[i,'ADMIN'] == 'Albania'|
countryRegions[i,'ADMIN'] == 'Montenegro'| countryRegions[i,'ADMIN'] == 'Bosnia and Herzegovina'|
countryRegions[i,'ADMIN'] == 'Macedonia'|countryRegions[i,'ADMIN'] == 'Kosovo'){
data_to_map[i,1]<-
.03
}
}
# merge
df_to_map <- data.frame(
Country = countryRegions$ISO3,
Data = data_to_map
)
# map draw
sPDF <- joinCountryData2Map(df_to_map,
joinCode = 'ISO3',
nameJoinColumn = 'Country')
colourPalette <- brewer.pal(5,'RdPu')
mapCountryData(sPDF,nameColumnToPlot = 'Data',
catMethod='pretty', colourPalette=colourPalette,
mapTitle ='Acceptance of Sugar Relationships in Older Men and Women (ASR-OMWS) ')
mapCountryData(sPDF,nameColumnToPlot = 'Data',
catMethod='pretty', colourPalette=colourPalette,
mapTitle ='Cohen\'s D of ASR-YWMS - ASR-OWMS')
library(lordif)
load("~/Documents/Research/bDIT/MI/test.RData")
# plots
plot(now[[1]], mfrow=c(3,3
))
# plots
plot(now[[1]], mfrow=c(3,3
))
?plot.lordif.MC
?plog.lordif
?plot.lordif
?plot.lordif.MC
# plots
# gender
plot(now[[1]], mfrow=c(3,3
))
# plots
# gender
plot(now[[1]], mfrow=c(3,3
))
?plot.lordif.MC
# plots
# gender
plot(now[[1]], mfrow=c(3,3, width=4   ))
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ), width=4  )
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ), width=10  )
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ), width=10, height=30  )
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ), width=10, height=30  )
?plot
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ), asp=1  )
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ), asp=2  )
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ), asp=1  )
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ))
# plots
# gender
plot(now[[1]], mfrow=c(3,4 ))
# plots
# gender
plot(now[[1]], mfrow=c(4,3 ))
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ))
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ),graphics.off())
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ),graphics.off(),height=10)
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ),graphics.off(),height=10)
# plots
# gender
plot(now[[1]], mfrow=c(3,3 ),graphics.off(),height=10)
plot(now[[2]], mfrow=c(3,3),graphics.off())
plot(now[[3]], mfrow=c(3,3),graphics.off())
# politics
plot(now[[4]], mfrow=c(3,3),graphics.off())
plot(now[[5]], mfrow=c(3,3),graphics.off())
plot(now[[6]], mfrow=c(3,3),graphics.off())
# religion
plot(now[[7]], mfrow=c(3,3),graphics.off())
plot(now[[8]], mfrow=c(3,3),graphics.off())
plot(now[[9]], mfrow=c(3,3),graphics.off())
library(lavaan)
install.packages('lavaan')
install.packages("lavaan")
library(lavaan)
library(psychonetrics)
install.packages('psychonetrics')
install.packages("psychonetrics")
library(psychonetrics)
library(lvnet)
install.packages('OpenMx')
install.packages("OpenMx")
install.packages("OpenMx")
install.packages("OpenMx")
cpp_BFGS
cpp_BFGSlibrary(plyr        )
library(plyr        )
library(psych)
library(expss)
library(dplyr)
library(lavaan)
library(psychonetrics)
library(lvnet)
load("~/Documents/Research/bDIT/Network_test/Untitled.RData")
train.rnm.test.dist <- prune(modelsearch(stepup(prune(
runmodel(setoptimizer(
lrnm(data=train,lambda=lvmodel1$lambda,
estimator='FIML', omega_epsilon='full'),optimizer='default'
)
)))),adjust='fdr')
train.rnm.test.dist
rnm.test.dist <- setoptimizer(lrnm(data=testdata,lambda=lvmodel1$lambda,
estimator='FIML', omega_epsilon='full'),optimizer='default')
rnm.test.dist <- rnm.test.dist %>% runmodel
rnm.test.dist
rnm.test.dist <- setoptimizer(lrnm(data=testdata,lambda=lvmodel1$lambda,
estimator='FIML', omega_epsilon='full'),optimizer='default')
rnm.test.dist <- rnm.test.dist %>% runmodel( bounded=F)
rnm.test.dist
fit(rnm.test.dist)
?setoptimizer
rnm.test.dist <- setoptimizer(lrnm(data=testdata,lambda=lvmodel1$lambda,
estimator='FIML', omega_epsilon='full'),optimizer='nlminb')
rnm.test.dist
rnm.test.dist <- rnm.test.dist %>% runmodel( bounded=F)
rnm.test.dist
rnm.test.dist <- setoptimizer(lrnm(data=testdata,lambda=lvmodel1$lambda,
estimator='FIML', omega_epsilon='full'),optimizer='cpp_Nelder-Mead')
rnm.test.dist <- rnm.test.dist %>% runmodel( bounded=F)
rnm.test.dist
# bDIT test
model.story <- '
Ps =~ Q116 + Q132 + Q133 + Q134 + Q135 + Q136 + Q137 + Q138 +
Q139 + Q140 + Q141 + Q142 + Q143 + Q144 + Q145 + Q146 +
Q147 + Q148 + Q149 + Q150+
Q151 + Q152 + Q153 + Q154'
fit.story <- cfa(model.story,data=DATA,estimator='MLR')
# data extract
test1 <- lavPredict(fit.story,append.data = T)
testnames1 <- colnames(test1)[2:length(colnames(test1))]
testdata1 <- DATA[,testnames1]
lvmodel2<-lav2lvnet(model.story,data=testdata1)
lvmodel2$lambda[is.na(lvmodel2$lambda)]<-1
for.lambda<-data.frame(lvmodel2$lambda)
colnames(for.lambda)<-'Ps'
rnm.test.dist1 <- prune(modelsearch(stepup(prune(
runmodel(setoptimizer(
rnm(data=testdata1,lambda=data.matrix(for.lambda),
estimator='FIML', omega_epsilon='full'),optimizer='default'
)
)))),adjust='fdr')
rnm.test.dist1 <- rnm(data=testdata1,lambda=data.matrix(for.lambda),
estimator='FIML', omega_epsilon='full')
rnm.test.dist1<- runmodel(rnm.test.dist1)
rnm.test.dist1
library(lavaan)
sessionInfo()
install.packages('lavaan')
install.packages("lavaan")
install.packages("lavaan")
80+54+57
60+70+64+80+57
158+173
158/331
100/191
34/54
13+110
13/(13+110)
110/(13+110)
80/95
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/Big_Picture/big.res.RData")
library(brms)
bf.pss.2.0
bf.pss.2.0
bf.pss.2.0 <- bayes_factor(pss.2,pss.0,log=T)
bf.pss.2.0
# all in one
library(psych)
library(BayesFactor)
library(doMC)
bf.pss.2.1
bf.pss.2.0
# bf
bf.pss.2.0 <- bayes_factor(pss.2,pss.0,log=T)
install.packages('brms')
install.packages("brms")
install.packages("brms")
library(brms)
bf.pss.2.1 <- bayes_factor(pss.2,pss.1,log=T)
setwd("~/Documents/Research/model_test/Tests")
source('../model_test.R')
library(countrycode)
setwd("~/Documents/Research/model_test/Tests")
load("~/Documents/Research/model_test/Tests/test_trust.RData")
nrow(text.exp)
# sort
test.exp.aic <- sort.result(text.exp,'AIC')
test.exp.bic <- sort.result(text.exp,'BIC')
head(test.exp.aic)
head(test.exp.bic)
# test
library(brms)
# bic model
start_bic <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.r.0 <- brm(formula(test.exp.bic[1,1]),data=data,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_bic<-Sys.time()
elapsed_r <- end_bic - start_bic
test.bic<-test.r.0
test.r.0
head(test.exp.bic)
start_aic <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.aic <- brm(formula(test.exp.aic[1,1]),data=data,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_aic<-Sys.time()
elapsed_r <- end_aic - start_aic
test.aic
elapsed_aic <- end_aic - start_aic
elapsed_bic <- end_bic - start_bic
start_0 <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.0 <- brm( vaccine_midneutral ~ age +
gender + education,data=data,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_aic<-Sys.time()
elapsed_0 <- end_0 - start_0
end_0 <- end_aic
elapsed_0 <- end_0 - start_0
bf.aic <- bayes_factor(test.0,test.exp.aic,log=T)
bf.aic <- bayes_factor(test.0,test.aic,log=T)
bf.bic <- bayes_factor(test.0,test.bic,log=T)
save.image('test_trust.RData')
bf.aic
bf.bic
bf.bic*-1
bf.bic[1*-1
bf.bic$bf*-1
bf.aic$bf*-1
text.exp[2315,]
start_f <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.f <- brm( formula (text.exp[nrow(text.exp),]),data=data,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
start_f <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.f <- brm( formula (text.exp[nrow(text.exp),1]),data=data,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_f<-Sys.time()
elapsed_f <- end_f - start_f
bf.full <- bayes_factor(test.0,test.f,log=T)
save.image('test_trust.RData')
bf.full
bf.bic
setwd("~/Documents/Research/model_test/Tests")
source('../model_test.R')
# load stress data file
load('Stress_aligned.RData')
# standardize
data.filtered$primary_stressor_avg <- scale(data.filtered$primary_stressor_avg)
data.filtered$secondary <- scale(data.filtered$secondary)
data.filtered$pss <- scale(data.filtered$pss)
data.filtered$sps <- scale(data.filtered$sps)
data.filtered$resilience <- scale(data.filtered$resilience)
data.filtered$identity <- scale(data.filtered$identity)
data.filtered$age <- scale(data.filtered$age)
data.filtered$SSS_faml <- scale(data.filtered$SSS_faml)
# formula (full)
f <- pss ~ primary_stressor_avg + secondary + sps + identity +
SSS_faml + gender
# test
start_100 <-Sys.time()
text.exp <- explore.models(data.filtered, f, group = 'residing_country',
slopes = c('primary_stressor_avg','secondary',
'sps','identity'),
must = c('SSS_faml','gender'),cores = 4)
end_100<-Sys.time()
elapsed_100 <- end_100 - start_100
# sort
test.exp.aic <- sort.result(text.exp,'AIC')
test.exp.bic <- sort.result(text.exp,'BIC')
# null vs full vs aic vs bic
library(brms)
start_0 <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.0 <- brm(formula(text.exp[16,1]),data=data.filtered,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415, prior=prior.coef
)
end_0<-Sys.time()
elapsed_0 <- end_0 - start_0
start_full <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.full <- brm(formula(text.exp[97,1]),data=data.filtered,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_full<-Sys.time()
elapsed_full <- end_full - start_full
# best bic:
start_bic <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.bic <- brm(formula(text.exp[83,1]),data=data.filtered,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_bic<-Sys.time()
elapsed_bic <- end_bic - start_bic
bf.aic <- bayes_factor(test.aic,test.0,log=T)
bf.bic <- bayes_factor(test.bic,test.0,log=T)
bf.full <- bayes_factor(test.full,test.0,log=T)
bf.bic
bf.full
elapsed_bic
start_aic <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.aic <- brm(formula(test.exp.aic[1,1]),data=data.filtered,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_aic<-Sys.time()
elapsed_aic <- end_aic - start_aic
bf.aic <- bayes_factor(test.aic,test.0,log=T)
bf.bic <- bayes_factor(test.bic,test.0,log=T)
bf.full <- bayes_factor(test.full,test.0,log=T)
save.image('stress_test.RData')
bf.bic
bf.full
bf.aic
setwd("~/Documents/Research/Collaborations/Marta/Codes/MLM")
source('../model_test.R')
setwd("~/Documents/Research/model_test/Tests")
source('../model_test.R')
# load aligned data
load((file='Vaccine_aligned.RData'))
# standardize willingness and VAQB
data.filtered$vx <- scale(data.filtered$vx)
data.filtered$consp <- scale(data.filtered$consp)
data.filtered$anti <- scale(data.filtered$anti)
data.filtered$trust_6 <- scale(data.filtered$trust_6)
data.filtered$trust_7 <- scale(data.filtered$trust_7)
# formula (full)
f <- vx ~ trust_6+consp+gender + education + work_location + age+
SSS_faml+ relationship_status
# test
start_100 <-Sys.time()
text.exp <- explore.models(data.filtered, f, group = 'residing_country',
slopes = c('trust_6','consp'),
must = c('SSS_faml','gender','education',
'age','work_location','relationship_status'),
cores = 4)
end_100<-Sys.time()
elapsed_100 <- end_100 - start_100
# sort
test.exp.aic <- sort.result(text.exp,'AIC')
test.exp.bic <- sort.result(text.exp,'BIC')
test.exp.aic
test.exp.aic[1,]
test.exp.bic[1,]
# test
library(brms)
# bic model/full
start_bic <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.bic <- brm(formula(test.exp.bic[1,1]),data=data,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
# test
library(brms)
# bic model/full
start_bic <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.bic <- brm(formula(test.exp.bic[1,1]),data=data.filtered,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_bic<-Sys.time()
elapsed_bic <- end_bic - start_bic
# null model
start_0 <-Sys.time()
prior.coef <- brms::prior(cauchy(0.,1),class='b')
test.0 <- brm( vx ~ age +
gender + education + work_location + age +
SSS_faml + relationship_status,data=data.filtered,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,
prior=prior.coef)
end_0<-Sys.time()
elapsed_0 <- end_0 - start_0
save.image('test_vaccine.RData')
bf.bic <- bayes_factor(test.0,test.bic,log=T)
save.image('test_vaccine.RData')
bf.bic
bf.bic <- bayes_factor(test.bic,test.0,log=T)
save.image('test_vaccine.RData')
